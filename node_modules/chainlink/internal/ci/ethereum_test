#!/bin/bash

#------------------------------------------------------------------------------
# SETUP
#------------------------------------------------------------------------------

set -e

# Utilities
assert ()
{
  sleepCount=0
  while [ "$sleepCount" -le "10" ] && output=`eval $2`; do
    if [ "$output" == "$3" ]; then
      printf -- "\033[32mTest passed!\033[0m $1: got expected value $3.\n"
      return
    fi
    sleepCount=$((sleepCount+1))
    sleep 1
  done
  printf -- "\033[31mTEST FAILED!\033[0m $1: expected $3, actual $output.\n"
  exit 1
}

waitForResponse ()
{
  printf -- "\033[34mWaiting for $1.\033[0m\n"
  sleepCount=0
  while [ "$sleepCount" -le "300" ] && ! curl -s "$1" >/dev/null; do
      sleep 1
      sleepCount=$((sleepCount+1))
  done

  if [ "$sleepCount" -gt "300" ]; then
    printf -- "\033[31mTimed out waiting for $1 (waited 300s).\033[0m\n"
    exit 1
  fi
  printf -- "\033[34mService on $1 is ready.\033[0m\n"
}

GIT_ROOT=`git rev-parse --show-toplevel`
ROOT=${CIRCLE_WORKING_DIRECTORY:-${TRAVIS_BUILD_DIR:-$GIT_ROOT}}
PATH=$ROOT/internal/bin:./node_modules/.bin:$PATH

# Script cleanup and failure diagnosis helpers
exit_handler() {
  errno=$?
  # Print all the logs if the test fails
  if [ $errno -ne 0 ]; then
    printf -- "\033[31mABORTING TEST!\033[0m\n"
    printf -- "Exited with code $errno\n"
    for log in $(find "$ROOT/integration" -maxdepth 1 -type f -iname '*.log'); do
      printf -- "\n--------------------------------------------------------------------------------\n"
      printf -- "\033[31m$log\033[0m\n"
      printf -- "--------------------------------------------------------------------------------\n\n"
      cat $log
    done
  fi
  if [ -z "$CIRCLECI" ]; then
    # Clear all signal handlers to prevent handler loop
    trap - 1 2 3 15
    # Kill all child subprocesses
    kill -- -$$ || true
  fi
}

trap "exit_handler" EXIT SIGTERM SIGINT

pushd $ROOT >/dev/null

# Install gethnet 1.8.8
#set -x
ethpkg=github.com/ethereum/go-ethereum
ethpath=$GOPATH/src/$ethpkg
if [ -d "$ethpath" ]; then
  pushd "$ethpath" >/dev/null
  git checkout master &>/dev/null
  go get -d -u $ethpkg
else
  go get -d $ethpkg
  pushd "$ethpath" >/dev/null
fi
git checkout v1.8.15 2>/dev/null
popd >/dev/null
go install $ethpkg/cmd/geth

########################
# Run gethnet
########################

printf -- "\033[34mStarting geth...\033[0m\n"
gethnet &>$ROOT/integration/gethnet.log &
waitForResponse http://127.0.0.1:18545
printf -- "\033[34mGeth is running.\033[0m\n"

########################
## Deploy Oracle and LinkToken contracts
########################

printf -- "\033[34mMigrating core contracts...\033[0m\n"
pushd integration >/dev/null

yarn --no-progress install &>$ROOT/integration/yarn.log
./deploy_contracts &>$ROOT/integration/deploy.log
export ORACLE_CONTRACT_ADDRESS=`cat $ROOT/integration/deploy.log | grep Oracle | awk '{print$4}'`
export LINK_TOKEN_ADDRESS=`cat $ROOT/integration/deploy.log | grep LinkToken | awk '{print$4}'`

popd >/dev/null
printf -- "\033[34mMigration complete.\033[0m\n"

########################
## Run ChainLink
########################

printf -- "\033[34mStarting chainlink...\033[0m\n"
export CHAINLINK_DEV=true
cldev &>$ROOT/integration/cldev.log &
waitForResponse http://127.0.0.1:6688
printf -- "\033[34mChainlink is running.\033[0m\n"

########################
## Run echo_server
########################

printf -- "\033[34mStarting echo server...\033[0m\n"
pushd integration >/dev/null

yarn --no-progress install &>$ROOT/integration/yarn2.log
./echo_server &>$ROOT/integration/echo-server.log &
waitForResponse http://127.0.0.1:6690/count

popd >/dev/null
printf -- "\033[34mEcho server is running.\033[0m\n\n"

#------------------------------------------------------------------------------
# TESTS
#------------------------------------------------------------------------------

printf -- "\n\033[34mRunning tests...\033[0m\n"
pushd integration >/dev/null

#########################
### runlog
#########################

printf -- "\n--------------------------------------------------------------------------------\n"
printf -- "\033[34mRunlog test.\033[0m\n"
printf -- "--------------------------------------------------------------------------------\n\n"

./send_runlog_transaction

# Check echo count
assert "Echo count" "curl -sS localhost:6690/count" 1

## Check job counts using jq to parse json: https://stedolan.github.io/jq/
cldev login --file internal/clroot/apicredentials
assert "Jobs count" "cldev -j j | jq length" 1

# Check job runs
jid=`cldev -j j | jq 'first | .id' | tr -d '"'`
assert "RunLog Runs count" "cldev -j s $jid |  jq '.runs | length'" 1

########################
## ethlog
########################

printf -- "\n--------------------------------------------------------------------------------\n"
printf -- "\033[34methlog test.\033[0m\n"
printf -- "--------------------------------------------------------------------------------\n\n"

ethjob=`./create_ethlog_job`
./send_ethlog_transaction

# Check echo count
assert "Echo count" "curl -sS localhost:6690/count" 2

## Check job counts
cldev login --file internal/clroot/apicredentials
assert "Jobs count" "cldev -j j | jq length" 2

## Check job runs
jid=`echo $ethjob | jq .data.id | tr -d '"'`
assert "EthLog Runs count" "cldev -j s $jid |  jq '.runs | length'" 1

printf -- "\n\033[34mAll tests passed.\033[0m\n\n"

# Return to caller's PWD
popd >/dev/null
popd >/dev/null
